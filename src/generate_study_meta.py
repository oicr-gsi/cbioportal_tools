import argparse
import helper


def define_parser():
    # Define program arguments
    parser = argparse.ArgumentParser(description="cBioPortal-Tools (https://github.com/oicr-gsi/cbioportal_tools) is a "
                                                 "command line tool for extracting data from files generated through "
                                                 "the seqware workflows, as well as from tools run outside of the "
                                                 "pipeline, and put them into the correct cBioPortal import files "
                                                 "(https://cbioportal.readthedocs.io/en/latest/File-Formats.html).")

    parser.add_argument("-i", "--study-id",
                        help="This is the cancer study ID, a unique string. Please use the format gene_lab_year. e.g."
                             "brca_gsi_2019",
                        metavar='')
    parser.add_argument("-f", "--study-folder",
                        help="This is the cancer study main directory.",
                        metavar='')
    # TODO: Remove need for type of cancer
    parser.add_argument("-t", "--type-of-cancer",
                        help="Cancer type abbreviation, e.g.'brca' or 'mixed' for multiple types.",
                        metavar='')
    parser.add_argument("-d", "--default",
                        action="store_true",
                        help="Prevents need for user input by trying to parse study ID, you must follow format "
                             "indicated in the help if you use this")
    # Still need to collect the name and the description
    return parser


def get_user_input():
    print("Write a description of the study below e.g. 'Comprehensive profiling of 103 breast cancer samples. "
          "Generated by Genome Sequence Informatics 2019.: ")
    description = raw_input()
    print("Please write the name of the study e.g. 'Breast Cancer (Genome Sequence Informatics 2019):'")
    name = raw_input()
    print("Now write the short name e.g. 'BRCA (GSI)': ")
    short_name = raw_input()
    return [description, name, short_name]


def save_meta_cancer_study(args):
    study_id = args.study_id
    type_of_cancer = args.type_of_cancer
    if not args.default:
        # If the user has not specified the default tag, ask for the rest of the missing data
        [description, name, short_name] = get_user_input()
    else:
        # Else attempt to make the best description with limited information
        split = study_id.split('_')
        description = 'Cancer study on {} by {} conducted in {}.'.format(*split)
        split[0] = split[0].upper()
        split[1] = split[1].upper()
        name = '{} {} ({})'.format(*split)
        short_name = '{} ({})'.format(*split)
    # Write information to file
    f = open('meta_study.txt', 'w+')
    f.write('type_of_cancer: ' + type_of_cancer + '\n')
    f.write('cancer_study_identifier: ' + study_id + '\n')
    f.write('name: ' + name + '\n')
    f.write('description: ' + description + '\n')
    f.write('short_name: ' + short_name + '\n')
    f.close()


def main():
    args = define_parser().parse_args()

    original_dir = helper.change_folder(args.study_folder)
    save_meta_cancer_study(args)
    helper.reset_folder(original_dir)


if __name__ == '__main__':
    main()
